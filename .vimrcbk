set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'fatih/vim-go'
Plugin 'fatih/molokai'
Plugin 'yggdroot/indentline'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'kien/ctrlp.vim'
Plugin 'isRuslan/vim-es6'
Plugin 'mileszs/ack.vim'

call vundle#end()
filetype plugin indent on

if has('gui_running')
    set guifont=Source_Code_Pro_for_Powerline:h14
    set guioptions-=m " hide menubar
    set guioptions-=T " hide toolbar
    set guioptions-=r " hide right scrollbar
    set guioptions-=L " hide left scrollbar
    set guicursor+=a:blinkon0 " disable cursor blinking
endif

" Enalbe syntax highlighting
syntax on

set autowrite

" Set utf8 as standard encoding
set encoding=utf8

" Set auto read when file changed
set autoread

" Set map leader
let mapleader = "\<Space>"

" Using two spaces instead of tab
set expandtab
set shiftwidth=4
set softtabstop=4

" Auto change directory to current
" set autochdir

" Ignrecase case when search
set ignorecase smartcase

" Turn on current line cursor
" set cursorline

" Turn on linenumbers
set number

" Hightlight search results
set hlsearch

" Auto matching target when typing
set incsearch

" Disable bells
set noerrorbells
set novisualbell

" Show current position
set ruler

" Show status bar
set laststatus=2

" Formate status bar
set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\ 

" Turn backup off
set nobackup
set nowb
set noswapfile

" Auto indent
set ai
" Smart indent
set si
" Wrap lines
set wrap

" A buffer turns to hidden when it is abandoned
set hid

autocmd Filetype html       setlocal ts=2 sw=2 expandtab
autocmd Filetype javascript setlocal ts=2 sw=2 expandtab
autocmd Filetype python     setlocal ts=4 sw=4 expandtab
autocmd BufNewFile,BufRead *.go setlocal tabstop=4 shiftwidth=4 noexpandtab 

augroup filetype javascript syntax=javascript

"""
""" Map leaders mapping """
"""
" Remap vim 0 to first non-blank characte
map 0 ^
" Disable highlight when pressed <leader> + <cr>
map <silent> <leader><cr> :noh<cr>
" Close the current buffer
map <leader>bd :bd<cr>:tabclose<cr>gT
" Close all the buffers
map <leader>ba :bufdo bd<cr>
" Switch to next buffer
map <leader>bn :bnext<CR>
map <leader>bp :bprevious<CR>
map <leader>bl :ls<CR>
map <leader><F12> :source %<CR>

" <leader> + w to force to save file
nmap <leader>w :w!<cr>

" At Visual mode pressing `*` or `#`
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

"""
""" Functions """
"""

function! CmdLine(str)
	call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", "\\/.*'$^~[]")
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'gv'
		call CmdLine("Ack '" . l:pattern . "' ")
	elseif a:direction == 'replace'
		call CmdLine("%s" . '/' . l:pattern . '/')
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

augroup Mkdir
    autocmd!
    autocmd BufWritePre *
        \ if !isdirectory(expand("<afile>:p:h")) |
            \ call mkdir(expand("<afile>:p:h"), "p") |
        \ endif
augroup END

""" Plugin settings

" nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <F3> :NERDTreeToggle<Cr>

" autocmd FileType go nmap <leader>gb  <Plug>(go-build)
autocmd FileType go nmap <leader>gr  <Plug>(go-run)
autocmd FileType go nmap <leader>gt  <Plug>(go-test)
autocmd FileType go nmap <leader>gf  <Plug>(go-fmt)

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
endfunction

autocmd FileType go nmap <leader>gb :<C-u>call <SID>build_go_files()<CR>

let g:go_fmt_command = "goimports"
let g:go_textobj_include_function_doc = 0
let g:go_highlight_types = 1
let g:go_highlight_fields = 1

let g:rehash256 = 1
let g:molokai_original = 1
colorscheme molokai
set background=dark

" plugin indentline
set list lcs=tab:\|\ " has a white space at last

" plugin rainbow_parentheses.vim
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" plugin vim-airline
let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts = 1

" plugin ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|pyc|node_modules)$'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log*

" disable hidden json quote
let g:indentLine_setConceal = 0

